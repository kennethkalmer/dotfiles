set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
" Important
Plugin 'altercation/vim-colors-solarized'
" Silver searcher in ctrl-p
Plugin 'rking/ag.vim'
" Ruby editing niceties (c-x c-o to show methods)
Plugin 'vim-ruby/vim-ruby'
" Rails navigation and much more (:A and :R, also try :Emodel name!)
Plugin 'tpope/vim-rails'
" Git wrapper for vim (try :Gblame)
Plugin 'tpope/vim-fugitive'
" Change surrounding chars (try cs\"' inside braces - remove the \ )
Plugin 'tpope/vim-surround'
" Helper to end control structures automatically (ruby, bash, VS, C/C++ etc)
Plugin 'tpope/vim-endwise'
" Run specs from vim
Plugin 'thoughtbot/vim-rspec'
" Autoclosing of quotes, parentheses, brackets etc
Plugin 'Raimondi/delimitMate'
" Fuzzy search of all files in directory
Plugin 'kien/ctrlp.vim'
" Begins tab completion with a single <tab> instead of c-x c-o
Plugin 'ervandew/supertab'
" CS syntax, indenting, compling etc
Plugin 'kchmck/vim-coffee-script'
" Easy multi line commenting (try <leader>ci )
Plugin 'ddollar/nerdcommenter'
" Preemptive syntax checking for multiple languages
Plugin 'scrooloose/syntastic'
" Awesome directory listings (try <leader>n )
Plugin 'scrooloose/nerdtree'
" Awesome status line
Plugin 'Lokaltog/vim-powerline'
Plugin 'stephenmckinney/vim-solarized-powerline'
" Provides nerdtree toggle function (mapped to <leader>n)
Plugin 'jistr/vim-nerdtree-tabs'
" Sublime Text style multiple cursors (put cursor on a word, then hit C-n)
Plugin 'terryma/vim-multiple-cursors'
" Unobtrusiver highlighting of trailing whitespaces (:Trim)
Plugin 'csexton/trailertrash.vim'
" Dependency of xolox's vim plugins
Plugin 'xolox/vim-misc'
" Auto ctags update
Plugin 'xolox/vim-easytags'
" Browse ctags in a bar
Plugin 'majutsushi/tagbar'
" Show git diff marks in sidebar
"http://stackoverflow.com/questions/15277241/changing-vim-gutter-color
Plugin 'airblade/vim-gitgutter'
" Align stuff
Plugin 'godlygeek/tabular'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VARIABLES
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Make our leader a space key? hmmm
let mapleader=" "
" Set local tags file for increased speed
set tags='./tags'
let g:easytags_dynamic_files=2
" Do not automatically update highlights (slows things down)
let g:easytags_auto_highlight=0
" Update tags every 15 secs on inactivity
let g:easytags_updatetime_min=15000

" Fancy status line delimeters (block arrow thing)
let g:Powerline_theme='long'
"let g:Powerline_symbols = 'fancy'
"let g:airline_powerline_fonts = 1

" Set ctrl-p's maximum height
let g:ctrlp_max_height = 25
" Check syntax on buffer read
let g:syntastic_check_on_open=1
let g:syntastic_disabled_filetypes=['html']
let g:syntastic_html_checkers=['']
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1
" Show hidden files in NERDTree
let NERDTreeShowHidden=1
let g:yankring_replace_n_pkey = '<C-;>'

" tslime config
"let g:rspec_command = 'call SendToTmux("zeus test {spec}\n")'
"let g:rspec_runner = 'os_x_iterm'
" CoVim config
"let CoVim_default_name = 'simon'
"let CoVim_default_port = '5555'

" Add change in cursor when in vim in tmux
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CONFIG
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Encoding
set encoding=utf8

" Configure solarized
syntax enable
set background=light
colorscheme solarized
let g:Powerline_colorscheme='solarized'

" Line highlighting
set cursorline
" Incremental search as you type
set incsearch
" Highlight current top result of search
set hlsearch
" Clear the initial highlight after sourcing
noh
" Ignore case if search begins with a lowercase letter
set ignorecase
" Enable case sensitive search if search begins with a captial
set smartcase
" Enable line numbers to the left of window
set number
" Enable line numbers relative to cursor line position
set relativenumber
" Offset when scrolling a file larger than window
set scrolloff=5
" Always show the status bar
set laststatus=2
" Do not redraw while running macros
set lazyredraw
" Don't line wrap text
set nowrap
" Allow backspacing over everything in insert mode
set backspace=indent,eol,start
" Enable default clipboard to system clipboard
set clipboard=unnamed
" (Hopefully) removes the delay when hitting esc in insert mode
set noesckeys
set ttimeout
set ttimeoutlen=1
" Highlight matching braces
set showmatch
" Hit <tab> to see all available commands
" Try :color <tab> to see what I mean
set wildmenu
" First <tab> complete to longest matching word, next <tab> invokes a list
set wildmode=longest,list

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
" Source https://github.com/thoughtbot/dotfiles/blob/master/vimrc
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAPPINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Removing current search highlight
map <leader>. :noh<cr>

" Toggle nerd tree
map <leader>n :NERDTreeTabsToggle<cr>
" " Toggle tagbar
map <leader>b :TagbarToggle<cr>
" " Close current buffer
map <leader>bd :bd!<cr>
" " Close all open buffers
map <leader>ba :1,1000 bd!<cr>

" j and k navigate through wrapped lines
nmap k gk
nmap j gj
"
" " Emacs-like beginning and end of line
imap <c-e> <c-o>$
imap <c-a> <c-o>^

" Convenient mappings for vim commands
map <leader>vbi :PluginInstall<cr>
map <leader>vbu :PluginUpdate<cr>
map <leader>vr :so ~/.vimrc<cr>
map <leader>ve :e ~/.vimrc<cr>
map <leader>te :e ~/.tmux.conf<cr>
map <leader>ze :e ~/.zshrc<cr>

" Conventient mapping of :Q to :q for mistakes while trying to quit
command! Q q
command! Qall qall
command! W w
command! Wa wall

""""""""""""""""""""""""""""""""""""""""""
" AUTOCMD
""""""""""""""""""""""""""""""""""""""""""
if has("autocmd")
  " Autoindent with two spaces, always expand tabs
  " These are abbreviations for tabstop, shiftwidth, softtabstop
  autocmd BufNewFile,BufReadPost * set ai ts=2 sw=2 sts=2 et

  " Check for external file changes
  autocmd CursorHold,CursorMoved,BufEnter * checktime

  " Close vim if nerdtree is the last window left open
   autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

  " Source .vimrc when saving .vimrc
  autocmd BufWritePost .vimrc source $MYVIMRC
  " Also load indent files, to automatically do language-dependent indenting.

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " Never wrap slim files
  autocmd FileType slim setlocal textwidth=0

  " Remove trailing whitespaces on save
  autocmd BufWritePre * :%s/\s\+$//e

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  augroup END
endif
